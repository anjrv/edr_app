// Generated by view binder compiler. Do not edit!
package com.example.storage.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.storage.R;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView backlogLabel;

  @NonNull
  public final TextView connectionLabel;

  @NonNull
  public final View divider;

  @NonNull
  public final TextView edr;

  @NonNull
  public final TextView labelAccuracy;

  @NonNull
  public final TextView labelAlt;

  @NonNull
  public final TextView labelLat;

  @NonNull
  public final TextView labelLon;

  @NonNull
  public final TextView labelSpeed;

  @NonNull
  public final TextView labelStd;

  @NonNull
  public final TextView labelZAcc;

  @NonNull
  public final TextView labelZFiltered;

  @NonNull
  public final SwitchMaterial sendBtn;

  @NonNull
  public final EditText server;

  @NonNull
  public final TextView serverLabel;

  @NonNull
  public final EditText session;

  @NonNull
  public final TextView sessionLabel;

  @NonNull
  public final TextView std;

  @NonNull
  public final SwitchMaterial switchBtn;

  @NonNull
  public final TextView time;

  @NonNull
  public final TextView timeLabel;

  @NonNull
  public final TextView tvAccuracy;

  @NonNull
  public final TextView tvAltitude;

  @NonNull
  public final TextView tvLat;

  @NonNull
  public final TextView tvLon;

  @NonNull
  public final TextView tvSpeed;

  @NonNull
  public final TextView zFiltered;

  @NonNull
  public final TextView zValue;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull TextView backlogLabel,
      @NonNull TextView connectionLabel, @NonNull View divider, @NonNull TextView edr,
      @NonNull TextView labelAccuracy, @NonNull TextView labelAlt, @NonNull TextView labelLat,
      @NonNull TextView labelLon, @NonNull TextView labelSpeed, @NonNull TextView labelStd,
      @NonNull TextView labelZAcc, @NonNull TextView labelZFiltered,
      @NonNull SwitchMaterial sendBtn, @NonNull EditText server, @NonNull TextView serverLabel,
      @NonNull EditText session, @NonNull TextView sessionLabel, @NonNull TextView std,
      @NonNull SwitchMaterial switchBtn, @NonNull TextView time, @NonNull TextView timeLabel,
      @NonNull TextView tvAccuracy, @NonNull TextView tvAltitude, @NonNull TextView tvLat,
      @NonNull TextView tvLon, @NonNull TextView tvSpeed, @NonNull TextView zFiltered,
      @NonNull TextView zValue) {
    this.rootView = rootView;
    this.backlogLabel = backlogLabel;
    this.connectionLabel = connectionLabel;
    this.divider = divider;
    this.edr = edr;
    this.labelAccuracy = labelAccuracy;
    this.labelAlt = labelAlt;
    this.labelLat = labelLat;
    this.labelLon = labelLon;
    this.labelSpeed = labelSpeed;
    this.labelStd = labelStd;
    this.labelZAcc = labelZAcc;
    this.labelZFiltered = labelZFiltered;
    this.sendBtn = sendBtn;
    this.server = server;
    this.serverLabel = serverLabel;
    this.session = session;
    this.sessionLabel = sessionLabel;
    this.std = std;
    this.switchBtn = switchBtn;
    this.time = time;
    this.timeLabel = timeLabel;
    this.tvAccuracy = tvAccuracy;
    this.tvAltitude = tvAltitude;
    this.tvLat = tvLat;
    this.tvLon = tvLon;
    this.tvSpeed = tvSpeed;
    this.zFiltered = zFiltered;
    this.zValue = zValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backlog_label;
      TextView backlogLabel = ViewBindings.findChildViewById(rootView, id);
      if (backlogLabel == null) {
        break missingId;
      }

      id = R.id.connection_label;
      TextView connectionLabel = ViewBindings.findChildViewById(rootView, id);
      if (connectionLabel == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.edr;
      TextView edr = ViewBindings.findChildViewById(rootView, id);
      if (edr == null) {
        break missingId;
      }

      id = R.id.label_accuracy;
      TextView labelAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (labelAccuracy == null) {
        break missingId;
      }

      id = R.id.label_alt;
      TextView labelAlt = ViewBindings.findChildViewById(rootView, id);
      if (labelAlt == null) {
        break missingId;
      }

      id = R.id.label_lat;
      TextView labelLat = ViewBindings.findChildViewById(rootView, id);
      if (labelLat == null) {
        break missingId;
      }

      id = R.id.label_lon;
      TextView labelLon = ViewBindings.findChildViewById(rootView, id);
      if (labelLon == null) {
        break missingId;
      }

      id = R.id.label_speed;
      TextView labelSpeed = ViewBindings.findChildViewById(rootView, id);
      if (labelSpeed == null) {
        break missingId;
      }

      id = R.id.label_std;
      TextView labelStd = ViewBindings.findChildViewById(rootView, id);
      if (labelStd == null) {
        break missingId;
      }

      id = R.id.label_zAcc;
      TextView labelZAcc = ViewBindings.findChildViewById(rootView, id);
      if (labelZAcc == null) {
        break missingId;
      }

      id = R.id.label_zFiltered;
      TextView labelZFiltered = ViewBindings.findChildViewById(rootView, id);
      if (labelZFiltered == null) {
        break missingId;
      }

      id = R.id.sendBtn;
      SwitchMaterial sendBtn = ViewBindings.findChildViewById(rootView, id);
      if (sendBtn == null) {
        break missingId;
      }

      id = R.id.server;
      EditText server = ViewBindings.findChildViewById(rootView, id);
      if (server == null) {
        break missingId;
      }

      id = R.id.server_label;
      TextView serverLabel = ViewBindings.findChildViewById(rootView, id);
      if (serverLabel == null) {
        break missingId;
      }

      id = R.id.session;
      EditText session = ViewBindings.findChildViewById(rootView, id);
      if (session == null) {
        break missingId;
      }

      id = R.id.session_label;
      TextView sessionLabel = ViewBindings.findChildViewById(rootView, id);
      if (sessionLabel == null) {
        break missingId;
      }

      id = R.id.std;
      TextView std = ViewBindings.findChildViewById(rootView, id);
      if (std == null) {
        break missingId;
      }

      id = R.id.switchBtn;
      SwitchMaterial switchBtn = ViewBindings.findChildViewById(rootView, id);
      if (switchBtn == null) {
        break missingId;
      }

      id = R.id.time;
      TextView time = ViewBindings.findChildViewById(rootView, id);
      if (time == null) {
        break missingId;
      }

      id = R.id.time_label;
      TextView timeLabel = ViewBindings.findChildViewById(rootView, id);
      if (timeLabel == null) {
        break missingId;
      }

      id = R.id.tv_accuracy;
      TextView tvAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (tvAccuracy == null) {
        break missingId;
      }

      id = R.id.tv_altitude;
      TextView tvAltitude = ViewBindings.findChildViewById(rootView, id);
      if (tvAltitude == null) {
        break missingId;
      }

      id = R.id.tv_lat;
      TextView tvLat = ViewBindings.findChildViewById(rootView, id);
      if (tvLat == null) {
        break missingId;
      }

      id = R.id.tv_lon;
      TextView tvLon = ViewBindings.findChildViewById(rootView, id);
      if (tvLon == null) {
        break missingId;
      }

      id = R.id.tv_speed;
      TextView tvSpeed = ViewBindings.findChildViewById(rootView, id);
      if (tvSpeed == null) {
        break missingId;
      }

      id = R.id.zFiltered;
      TextView zFiltered = ViewBindings.findChildViewById(rootView, id);
      if (zFiltered == null) {
        break missingId;
      }

      id = R.id.zValue;
      TextView zValue = ViewBindings.findChildViewById(rootView, id);
      if (zValue == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, backlogLabel, connectionLabel,
          divider, edr, labelAccuracy, labelAlt, labelLat, labelLon, labelSpeed, labelStd,
          labelZAcc, labelZFiltered, sendBtn, server, serverLabel, session, sessionLabel, std,
          switchBtn, time, timeLabel, tvAccuracy, tvAltitude, tvLat, tvLon, tvSpeed, zFiltered,
          zValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
